pipeline {
	agent any

	parameters {
		choice(name: 'workspace', choices:['prod'], description: 'Workspace/environment file to use for deployment')
		booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
		booleanParam(name: 'destroy', defaultValue: false, description: 'Destroy Terraform build?')
	}

	environment {
		TF_IN_AUTOMATION = 'TF_IN_AUTOMATION'
		BITBUCKET_REPO = 'git@bitbucket.org:jimmy233/terraform-configuration.git'
		WORKSPACE_PATH = '/var/jenkins_home/workspace/terraform'
		AWS_ACCESS_KEY_ID     = credentials('AWS_Access_Key')
		AWS_SECRET_ACCESS_KEY = credentials('AWS_Secret_Access_Key')
		PATH = "$PATH:${getTerraformPath()}"
	}

	options {
		// Keep maximum 10 archievd artifacts
		buildDiscarder(logRotator(numToKeepStr:'10', artifactNumToKeepStr:'10'))
		// No simultaneous builds
		disableConcurrentBuilds()
		durabilityHint('MAX_SURVIVABILITY') // PERFORMANCE_OPTIMIZED or SURVIVABLE_NONATOMIC
	}

	stages {

		stage('Terraform Init') {
			steps {				
				dir("applications/example_web_app"){
					sh "terraform version"
					sh "terraform init"
				}
			}
		}

		stage('Terraform Plan') {	
			when {
				not {
					equals expected: true, actual: params.destroy
				}
			}    

			steps {
				dir("applications/example_web_app"){
					sh "terraform workspace select ${params.workspace} || terraform workspace new ${params.workspace}"
					sh "terraform plan -var-file=${params.workspace}.tfvars -input=false -out tfplan"

				}
			}
		}

		stage('Terraform Apply') {
			when {
					equals expected: true, actual: params.autoApprove
			}

			steps {
				dir("applications/example_web_app"){ 
					sh "terraform apply -input=false -var-file=${params.workspace}.tfvars --auto-approve"
				}
			}
		}

		stage('Destroy') {
			when {
					equals expected: true, actual: params.destroy
			}
			
			steps {
				dir("applications/example_web_app"){ 
					sh 'terraform workspace list'
					sh "terraform workspace select ${params.workspace} || terraform workspace new ${params.workspace}"
					sh "terraform destroy -var-file=${params.workspace}.tfvars --auto-approve"
				}
			}
		}
		
	}  
	post { 
			always { 
				deleteDir()
			}
		}

}

def getTerraformPath(){
	def tfHome = tool name: "terraform"
	return tfHome
}