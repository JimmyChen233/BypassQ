pipeline {
	agent any
    
	environment {
        AWS_ACCOUNT_ID="325660384969"
        AWS_DEFAULT_REGION="ap-southeast-2" 
        IMAGE_REPO_NAME="bypassq"
        IMAGE_TAG="bypassq apis"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        COMMIT_HASH="latest"
        DB_URL     = credentials('DB_URL')
        PROD_DB_URL = credentials('PROD_DB_URL')
        JWT_SECRET     = credentials('JWT_SECRET')
        AWS_REGION     = 'us-east-1'
        AWS_ACCESS_KEY     = credentials('AWS_ACCESS_KEY')
        AWS_SECRET_KEY     = credentials('AWS_SECRET_KEY')
        AWS_S3_BUCKET     = credentials('AWS_S3_BUCKET')
        ECS_SERVICE = "bypassq-prod-service"
        ECS_CLUSTER = "bypassq-prod-cluster"

    }   

    stages {

        stage('Logging into AWS ECR') {
            steps {
                withAWS(credentials: 'jimmy-jenkins-credential') {
                    sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                }
                 
            }
        }

        stage('Building image') {
            when {
					equals expected: true, actual: params.build
			}
            steps{
                script {
                    echo 'Building the Docker image'
                    sh "docker build --build-arg DB_URL=${DB_URL} --build-arg PROD_DB_URL=${PROD_DB_URL} --build-arg JWT_SECRET=${JWT_SECRET} --build-arg AWS_REGION=${AWS_REGION} --build-arg AWS_ACCESS_KEY=${AWS_ACCESS_KEY} --build-arg AWS_SECRET_KEY=${AWS_SECRET_KEY} --build-arg AWS_S3_BUCKET=${AWS_S3_BUCKET} -t $REPOSITORY_URI:$COMMIT_HASH ."
                }
            }
        }

        // Uploading Docker images into AWS ECR and update ECS
        stage('Deploying') {
            when {
					equals expected: true, actual: params.build
			}
            steps{  
                script {
                    withAWS(credentials: 'jimmy-jenkins-credential') {
                        sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                        echo "Build completed"
                        echo "Pushing the Docker image"
                        sh "docker push $REPOSITORY_URI:$COMMIT_HASH"
                        echo "Pushed successfully"
                    }
                    try {
                        withAWS(region: "ap-southeast-2", credentials: 'jimmy-jenkins-credential') {
                            def updateService = "aws ecs update-service --service $ECS_SERVICE --cluster $ECS_CLUSTER --force-new-deployment"
                            def runUpdateService = sh(returnStdout: true, script: updateService)
                            def serviceStable = "aws ecs wait services-stable --service $ECS_SERVICE --cluster $ECS_CLUSTER"
                            sh(returnStdout: true, script: serviceStable)
                            // put all your slack messaging here
                        }
                    }   catch(Exception e) {
                        echo e.message.toString()
                    }

                }
            }
        }

        stage


    }


    post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}